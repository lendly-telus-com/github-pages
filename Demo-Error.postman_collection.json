{
  "info": {
    "_postman_id": "08b51e62-81cf-447e-8f22-d2b68c4b018c",
    "name": "Demo-Error",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "30142194"
  },
  "item": [
    {
      "name": "usecases",
      "item": [
        {
          "name": "/2.0/bots/spoc",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(202);\r",
                  "});\r",
                  "pm.test(\"Validate response schema\", function () {\r",
                  "    var schema = {\r",
                  "        type: \"object\",\r",
                  "        properties: {\r",
                  "            query: { type: \"string\" },\r",
                  "            query_converted: { type: \"string\" },\r",
                  "            qie_status: { type: \"boolean\" },\r",
                  "            chat_history: {\r",
                  "                type: \"array\",\r",
                  "                minItems: 1,\r",
                  "                items: {\r",
                  "                    type: \"object\",\r",
                  "                    properties: {\r",
                  "                        role: { type: \"string\" },\r",
                  "                        content: { type: \"string\" }\r",
                  "                    },\r",
                  "                    required: [\"role\", \"content\"]\r",
                  "                }\r",
                  "            },\r",
                  "            done: { type: \"boolean\" },\r",
                  "            temp: { type: \"number\" },\r",
                  "            answer_unknown: { type: \"boolean\" },\r",
                  "            request_id: { type: \"integer\", minimum: 1 },\r",
                  "            request_time: { type: \"string\" },\r",
                  "            token_usage: {\r",
                  "                type: \"object\",\r",
                  "                properties: {\r",
                  "                    condense_llm_prompt: { type: \"number\" },\r",
                  "                    chat_llm_prompt: { type: \"number\" },\r",
                  "                    chat_llm_completion: { type: \"number\" }\r",
                  "                }\r",
                  "            },\r",
                  "            response: { type: \"string\" },\r",
                  "            elapsed: { type: \"number\" }\r",
                  "        },\r",
                  "        required: [\"query\", \"query_converted\", \"qie_status\", \"chat_history\", \"done\", \"temp\", \"answer_unknown\", \"request_id\", \"request_time\", \"token_usage\", \"response\", \"elapsed\"]\r",
                  "    };\r",
                  "\r",
                  "    var response = pm.response.json();\r",
                  "    pm.expect(tv4.validate(response, schema)).to.be.true;\r",
                  "});\r",
                  "pm.test(\"Verify the 'query' field\", function () {\r",
                  "    pm.expect(pm.response.json()).to.have.property(\"query\");\r",
                  "});\r",
                  "pm.test(\"Verify the 'query_converted' field\", function () {\r",
                  "    pm.expect(pm.response.json()).to.have.property(\"query_converted\");\r",
                  "});\r",
                  "pm.test(\"Verify the 'qie_status' field\", function () {\r",
                  "    pm.expect(pm.response.json()).to.have.property(\"qie_status\", true);\r",
                  "});\r",
                  "pm.test(\"Verify the 'chat_history' field\", function () {\r",
                  "    pm.expect(pm.response.json()).to.have.property(\"chat_history\");\r",
                  "});\r",
                  "pm.test(\"Verify the 'done' field\", function () {\r",
                  "    pm.expect(pm.response.json()).to.have.property(\"done\", true);\r",
                  "});\r",
                  "pm.test(\"Verify the 'temp' field\", function () {\r",
                  "    pm.expect(pm.response.json()).to.have.property(\"temp\");\r",
                  "});\r",
                  "pm.test(\"Verify the 'answer_unknown' field\", function () {\r",
                  "    pm.expect(pm.response.json()).to.have.property(\"answer_unknown\", false);\r",
                  "});\r",
                  "pm.test(\"Verify the 'request_id' field\", function () {\r",
                  "    pm.expect(pm.response.json()).to.have.property(\"request_id\");\r",
                  "});\r",
                  "pm.test(\"Verify the 'request_time' field\", function () {\r",
                  "    pm.expect(pm.response.json()).to.have.property(\"request_time\");\r",
                  "});\r",
                  "pm.test(\"Verify the 'token_usage' field\", function () {\r",
                  "    pm.expect(pm.response.json()).to.have.property(\"token_usage\");\r",
                  "});\r",
                  "pm.test(\"Verify the 'response' field\", function () {\r",
                  "    pm.expect(pm.response.json()).to.have.property(\"response\");\r",
                  "});\r",
                  "pm.test(\"Verify the 'elapsed' field\", function () {\r",
                  "    pm.expect(pm.response.json()).to.have.property(\"elapsed\");\r",
                  "});\r",
                  "pm.test(\"Verify that 'chat_history' contains an array of messages\", function () {\r",
                  "    pm.expect(pm.response.json().chat_history).to.be.an(\"array\");\r",
                  "});\r",
                  "//todo\r",
                  "pm.test(\"Verify the content of the 'response' field\", function () {\r",
                  "    pm.expect(pm.response.json().response).to.include(\"\");\r",
                  "});\r",
                  "pm.test(\"Verify the presence of 'Sources' in the 'response' field\", function () {\r",
                  "    pm.expect(pm.response.json().response).to.include(\"Sources:\");\r",
                  "});\r",
                  "pm.test(\"Verify the 'token_usage' field has specific properties\", function () {\r",
                  "    pm.expect(pm.response.json().token_usage).to.have.property(\"condense_llm_prompt\");\r",
                  "    pm.expect(pm.response.json().token_usage).to.have.property(\"chat_llm_prompt\");\r",
                  "    pm.expect(pm.response.json().token_usage).to.have.property(\"chat_llm_completion\");\r",
                  "});\r",
                  "pm.test(\"Verify that 'chat_history' contains at least one message\", function () {\r",
                  "    pm.expect(pm.response.json().chat_history).to.have.length.above(0);\r",
                  "});\r",
                  "pm.test(\"Verify that 'chat_history' contains a message from the Human role\", function () {\r",
                  "    const chatHistory = pm.response.json().chat_history;\r",
                  "    const humanMessage = chatHistory.find((message) => message.role === \"Human\");\r",
                  "    pm.expect(humanMessage).to.exist;\r",
                  "});\r",
                  "pm.test(\"Verify that 'chat_history' contains a message from the Assistant role\", function () {\r",
                  "    const chatHistory = pm.response.json().chat_history;\r",
                  "    const assistantMessage = chatHistory.find((message) => message.role === \"Assistant\");\r",
                  "    pm.expect(assistantMessage).to.exist;\r",
                  "});\r",
                  "pm.test(\"Verify the 'request_time' field is a valid date format\", function () {\r",
                  "    pm.expect(pm.response.json().request_time).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{6}$/);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "  // Define the OAuth 2.0 token request parameters\r",
                  "const tokenUrl = pm.environment.get('access_token_url');\r",
                  "const clientId = pm.environment.get('client_id');\r",
                  "const clientSecret = pm.environment.get('client_secret');\r",
                  "const scope = pm.environment.get('scope');\r",
                  "\r",
                  "pm.sendRequest({\r",
                  "    url: tokenUrl,\r",
                  "    method: \"POST\",\r",
                  "    header: [\r",
                  "        'Content-Type:application/x-www-form-urlencoded'\r",
                  "    ],\r",
                  "    body: {\r",
                  "        mode: \"urlencoded\",\r",
                  "        urlencoded: [\r",
                  "            {key: \"client_id\", value: clientId},\r",
                  "            {key: \"client_secret\", value: clientSecret},\r",
                  "            {key: \"scope\", value: scope},\r",
                  "            {key: \"grant_type\", value: \"client_credentials\"}\r",
                  "        ]\r",
                  "    },\r",
                  "},\r",
                  "(error, response) => {    \r",
                  "    pm.environment.set(\"access_token\", response.json().access_token);    \r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"chat_history\": [\r\n        {\r\n            \"role\": \"Human\",\r\n            \"content\": \"How do I change my laptop?\"\r\n        },\r\n        {\r\n            \"role\": \"Assistant\",\r\n            \"content\": \"You will need to submit a TSR request.\"\r\n        }\r\n    ],\r\n    \"query\": \"how?\",\r\n    \"language\": \"en\",\r\n    \"stream\": false,\r\n    \"return_docs\": false\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "https://ai-np.cloudapps.telus.com/unicorn-brain/2.0/bots/spoc",
              "protocol": "https",
              "host": ["ai-np", "cloudapps", "telus", "com"],
              "path": ["unicorn-brain", "2.0", "bots", "spoc"]
            }
          },
          "response": []
        }
      ]
    }
  ]
}
